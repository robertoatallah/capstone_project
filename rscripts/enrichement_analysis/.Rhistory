#   Differential expression analysis with limma
setwd("~/Documents/capstone/rscripts/deg/")
library(GEOquery)
library(limma)
library(umap)
#   Differential expression analysis with limma
setwd("~/Documents/capstone/rscripts/deg/")
library(GEOquery)
library(limma)
gset <- getGEO("GSE16441", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
sml <- strsplit(gsms, split="")[[1]]
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("RCC","Normal"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title", "Gene.ID"))
deg <- tT %>%
mutate(condition = abs(logFC) > 2 & adj.P.Val < 0.05 & Gene.symbol != "")
library(dplyr)
library(dplyr)
deg <- tT %>%
mutate(condition = abs(logFC) > 2 & adj.P.Val < 0.05 & Gene.symbol != "")
deg <- subset(deg, deg$condition == TRUE)
write.csv(deg, file="DEG_table.csv", row.names=FALSE)
write.table(deg$Gene.ID, file= "DEG_IDs.txt", row.names = FALSE, col.names = FALSE)
write.table(deg$Gene.symbol, file= "DEG_symbols.txt", row.names = FALSE, col.names = FALSE)
write.table(grep("LINC.*", deg$Gene.symbol, value = TRUE), "LNC.txt", row.names = FALSE, col.names = FALSE)
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
library(umap)
library(umap)
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
ex <- exprs(gset)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
# Venn diagram of results
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05, lfc = 0)
vennDiagram(dT, circle.col=palette())
which(dT[,ct] <0)
nrow(fit2)
nrow(dT)
dT2 <-subset(dT, )
colnames(fit2)[1]
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
nrow(fit2)
?decideTests()
ex <- exprs(gset)
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
ord
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
#box plot
title <- paste ("GSE125361", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
gset <- getGEO("GSE16441", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
sml <- strsplit(gsms, split="")[[1]]
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("RCC","Normal"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title", "Gene.ID"))
deg <- tT %>%
mutate(condition = abs(logFC) > 2 & adj.P.Val < 0.05 & Gene.symbol != "")
# summarize test results
sum(deg$condition == TRUE)
sum(deg$condition== TRUE & mRNA1$logFC > 0)
# summarize test results
sum(deg$condition == TRUE)
sum(deg$condition== TRUE & deg$logFC > 0)
sum(deg$condition== TRUE & deg$logFC < 0)
deg <- subset(deg, deg$condition == TRUE)
write.csv(deg, file="DEG_table.csv", row.names=FALSE)
write.table(deg$Gene.ID, file= "DEG_IDs.txt", row.names = FALSE, col.names = FALSE)
write.table(deg$Gene.symbol, file= "DEG_symbols.txt", row.names = FALSE, col.names = FALSE)
#REGEX to take long non coding RNA from the data
write.table(grep("LINC.*", deg$Gene.symbol, value = TRUE), "LNC.txt", row.names = FALSE, col.names = FALSE)
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
ex <- exprs(gset)
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,1], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[1])
legend("topleft", groups, fill=palette(), bty="n")
#   Differential expression analysis with limma
setwd("~/Documents/capstone/rscripts/dem/")
gset <- getGEO("GSE16441", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL8659", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
sml <- strsplit(gsms, split="")[[1]]
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("RCC","Normal"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","miRNA_ID","SPOT_ID"))
dem <- tT %>%
mutate(condition = abs(logFC) > 1 & adj.P.Val < 0.05)
dem <- subset(dem, dem$condition == TRUE)
write.csv(dem, file="dem_table.csv", row.names=FALSE)
write.table(dem$miRNA_ID, file= "dem_symbols.txt", row.names = FALSE, col.names = FALSE)
# Venn diagram of results
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05, lfc = 0)
vennDiagram(dT, circle.col=palette())
which(dT[,ct] <0)
nrow(fit2)
nrow(dT)
dT2 <-subset(dT, )
colnames(fit2)[1]
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
nrow(fit2)
?decideTests()
ex <- exprs(gset)
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
dem <- tT %>%
mutate(condition = abs(logFC) > 1 & adj.P.Val < 0.05)
# summarize test results
sum(dem$condition == TRUE)
sum(dem$condition== TRUE & dem$logFC > 0)
sum(dem$condition== TRUE & dem$logFC < 0)
dem <- subset(dem, dem$condition == TRUE)
write.csv(dem, file="dem_table.csv", row.names=FALSE)
write.table(dem$miRNA_ID, file= "dem_symbols.txt", row.names = FALSE, col.names = FALSE)
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
abline(v = -2, lty = 2) # Dashed line at x=-2
abline(v = 2, lty = 2) # Dashed line at x=2
abline(v = -1, lty = 2) # Dashed line at x=-2
abline(v = 1, lty = 2) # Dashed line at x=2
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
abline(v = -1, lty = 2) # Dashed line at x=-2
abline(v = 1, lty = 2) # Dashed line at x=2
abline(h = 1.3, lty = 2, xlim = c(-10, -1)) # Dashed line from x=-infinity to -1
abline(h = 1.3, lty = 2, xlim = c(1, 10)) # Dashed line from x=1 to infinity
abline(h = 1.3, lty = 2, xlim = c(-10, -1)) # Dashed line from x=-infinity to -1
abline(h = 1.3, lty = 2, xlim = c(1, 10)) # Dashed line from x=1 to infinity
points(dem, pch = 16, col = "red")
points(subset(dem, abs(dem$logFC) > -1 & dem$P.Value<0..05), pch = 16, col = "red")
points(subset(dem, abs(dem$logFC) > -1 & dem$P.Value<0.05), pch = 16, col = "red")
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
abline(v = -1, lty = 2) # Dashed line at x=-2
abline(v = 1, lty = 2) # Dashed line at x=2
abline(h = 1.3, lty = 2)
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
gset <- getGEO("GSE16441", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
sml <- strsplit(gsms, split="")[[1]]
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("RCC","Normal"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title", "Gene.ID"))
#Take table and mutate it based on condition to extract DEGs
deg <- tT %>%
mutate(condition = abs(logFC) > 2 & adj.P.Val < 0.05 & Gene.symbol != "")
# summarize test results
sum(deg$condition == TRUE)
sum(deg$condition== TRUE & deg$logFC > 0)
sum(deg$condition== TRUE & deg$logFC < 0)
deg <- subset(deg, deg$condition == TRUE)
write.csv(deg, file="DEG_table.csv", row.names=FALSE)
write.table(deg$Gene.ID, file= "DEG_IDs.txt", row.names = FALSE, col.names = FALSE)
write.table(deg$Gene.symbol, file= "DEG_symbols.txt", row.names = FALSE, col.names = FALSE)
#REGEX to take long non coding RNA from the data
write.table(grep("LINC.*", deg$Gene.symbol, value = TRUE), "LNC.txt", row.names = FALSE, col.names = FALSE)
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
abline(v = -2, lty = 2) # Dashed line at x=-2
abline(v = 2, lty = 2) # Dashed line at x=2
abline(h = 1.3, lty = 2)
abline(v = -2, lty = 2, col="red") # Dashed line at x=-2
abline(v = 2, lty = 2) # Dashed line at x=2
abline(h = 1.3, lty = 2)
abline(h = 1.3, lty = 2, col="red")
abline(v = 2, lty = 2, col+"red") # Dashed line at x=2
abline(v = 2, lty = 2, col+"red") # Dashed line at x=2
abline(v = 2, lty = 2, col+"red") # Dashed line at x=2
abline(v = 2, lty = 2, col="red") # Dashed line at x=2
ex <- exprs(gset)
# box-and-whisker plot
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,1], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[1])
legend("topleft", groups, fill=palette(), bty="n")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
# box-and-whisker plot
ord <- order(gs)
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
gset <- getGEO("GSE16441", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6480", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
sml <- strsplit(gsms, split="")[[1]]
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("RCC","Normal"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title", "Gene.ID"))
#Take table and mutate it based on condition to extract DEGs
deg <- tT %>%
mutate(condition = abs(logFC) > 2 & adj.P.Val < 0.05 & Gene.symbol != "")
# summarize test results
sum(deg$condition == TRUE)
sum(deg$condition== TRUE & deg$logFC > 0)
sum(deg$condition== TRUE & deg$logFC < 0)
deg <- subset(deg, deg$condition == TRUE)
write.csv(deg, file="DEG_table.csv", row.names=FALSE)
write.table(deg$Gene.ID, file= "DEG_IDs.txt", row.names = FALSE, col.names = FALSE)
write.table(deg$Gene.symbol, file= "DEG_symbols.txt", row.names = FALSE, col.names = FALSE)
#REGEX to take long non coding RNA from the data
write.table(grep("LINC.*", deg$Gene.symbol, value = TRUE), "LNC.txt", row.names = FALSE, col.names = FALSE)
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
abline(v = -2, lty = 2, col="red") # Dashed line at x=-2
abline(v = 2, lty = 2, col="red") # Dashed line at x=2
abline(h = 1.3, lty = 2, col="red")
ex <- exprs(gset)
# box-and-whisker plot
ord <- order(gs)
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02","#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
#   Differential expression analysis with limma
setwd("~/Documents/capstone/rscripts/dem/")
library(GEOquery)
library(limma)
library(dplyr)
library(umap)
gset <- getGEO("GSE16441", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL8659", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gset <- gset[[idx]]
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
sml <- strsplit(gsms, split="")[[1]]
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset <- gset[[idx]]
if (length(gset) > 1) idx <- grep("GPL8659", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset <- getGEO("GSE16441", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL8659", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "0000000000000000011111111111111111"
sml <- strsplit(gsms, split="")[[1]]
#Data has already been LOWESS normalized and log2 transformed, it is indicated in file.
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("RCC","Normal"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","miRNA_ID","SPOT_ID"))
dem <- tT %>%
mutate(condition = abs(logFC) > 1 & adj.P.Val < 0.05)
# summarize test results
sum(dem$condition == TRUE)
sum(dem$condition== TRUE & dem$logFC > 0)
sum(dem$condition== TRUE & dem$logFC < 0)
dem <- subset(dem, dem$condition == TRUE)
write.csv(dem, file="dem_table.csv", row.names=FALSE)
write.table(dem$miRNA_ID, file= "dem_symbols.txt", row.names = FALSE, col.names = FALSE)
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20)
abline(v = -1, lty = 2) # Dashed line at x=-2
abline(v = 1, lty = 2) # Dashed line at x=2
abline(h = 1.3, lty = 2)
abline(v = -1, lty = 2, col="red") # Dashed line at x=-2
abline(v = 1, lty = 2, col="red") # Dashed line at x=2
abline(h = 1.3, lty = 2, col="red")
ex <- exprs(gset)
# box-and-whisker plot
ord <- order(gs)
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02","#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("GSE16441", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
View(deg)
setwd("~/Documents/capstone/rscripts/enrichement_analysis/")
chart<-read.table("chart_4CBB66A493291681316993753.txt", sep="\t", header = TRUE)
cc <- chart[grep("^GOTERM_CC", chart$Category), ][1:5, ]
bp <- chart[grep("^GOTERM_BP", chart$Category), ][1:5, ]
mf <- chart[grep("^GOTERM_MF", chart$Category), ][1:5, ]
kegg <- chart[grep("^KEGG", chart$Category), ][1:5, ]
cc <- cc %>%
mutate(Category = "CC") %>%
select(Category, everything())
cc<-cc[,c(1:3, 5)]
bp <- bp %>%
mutate(Category = "BP") %>%
select(Category, everything())
bp<-bp[,c(1:3, 5)]
mf <- mf %>%
mutate(Category = "MF") %>%
select(Category, everything())
mf<-mf[,c(1:3, 5)]
kegg <- kegg %>%
mutate(Category = "KEGG") %>%
select(Category, everything())
kegg<-kegg[,c(1:3, 5)]
enrichement<- rbind(cc, bp, mf, kegg)
temp <- enrichement
temp$Term <- substr(temp$Term, 1, 10)
library(ggplot2)
# create a bar plot of the enrichment data
ggplot(enrichement, aes(x = Count, y = reorder(Term, Count), fill = Category)) +
geom_bar(stat = "identity") +
xlab("Count") +
ylab("Row") +
ggtitle("Enrichement Data by Row Name")
